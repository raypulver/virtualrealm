find_package(Boost COMPONENTS system thread regex unit_test_framework REQUIRED)
find_package(Protobuf REQUIRED)
set(CURSES_USE_NCURSES TRUE)
find_package(Curses REQUIRED)
if (Boost_FOUND)
  file(GLOB ProtoFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ../proto/*.proto)
  PROTOBUF_GENERATE_CPP(ProtoSources ProtoHeaders ${ProtoFiles})
  set(PROTOBUF_IMPORT_DIRS RELATIVE ${PROJECT_BINARY_DIR} ./src)
  include_directories(${Boost_INCLUDE_DIRS} ${CURSES_INCLUDE_DIRS})
  file(GLOB TEST_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ../test/*.cc)
  foreach(testSrc ${TEST_SRCS})
    get_filename_component(testName ${testSrc} NAME_WE)
    add_executable(${testName} ${testSrc} virtualrealm.cc formatter.cc exception.cc ${ProtoSources})
    target_link_libraries(${testName} ${Boost_LIBRARIES} ${CURSES_LIBRARIES} ${PROTOBUF_LIBRARIES})
    set_target_properties(${testName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/test)
    add_test(NAME ${testName} WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test COMMAND ${PROJECT_BINARY_DIR}/test/${testName})
  endforeach(testSrc)
  add_executable(virtualrealm main.cc virtualrealm.cc formatter.cc exception.cc ${ProtoSources})
  target_link_libraries(virtualrealm ${Boost_LIBRARIES} ${CURSES_LIBRARIES} ${PROTOBUF_LIBRARIES})
  set_target_properties(virtualrealm PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
endif()
